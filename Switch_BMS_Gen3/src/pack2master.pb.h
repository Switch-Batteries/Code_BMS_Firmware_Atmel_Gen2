/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5-dev */

#ifndef PB_PACK2MASTER_PACK2MASTER_PB_H_INCLUDED
#define PB_PACK2MASTER_PACK2MASTER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _pack2master_data {
    bool has_Voltage;
    uint32_t Voltage;
    bool has_VAuxVoltage;
    uint32_t VAuxVoltage;
    bool has_ExtAvgVoltage;
    uint32_t ExtAvgVoltage;
    bool has_Current;
    uint32_t Current;
    bool has_AvgCurrent;
    uint32_t AvgCurrent;
    bool has_CycleCount;
    uint32_t CycleCount;
    bool has_CapacityRemaining;
    uint32_t CapacityRemaining;
    bool has_CapacityFull;
    uint32_t CapacityFull;
    bool has_RuntimeToEmpty;
    uint32_t RuntimeToEmpty;
    bool has_AvgTimeToEmpty;
    uint32_t AvgTimeToEmpty;
    bool has_AvgTimeToFull;
    uint32_t AvgTimeToFull;
    bool has_RelativeSoC;
    uint32_t RelativeSoC;
    bool has_AbsoluteSoC;
    uint32_t AbsoluteSoC;
    bool has_SoH;
    uint32_t SoH;
    bool has_Cell_1_Voltage;
    uint32_t Cell_1_Voltage;
    bool has_Cell_2_Voltage;
    uint32_t Cell_2_Voltage;
    bool has_Cell_3_Voltage;
    uint32_t Cell_3_Voltage;
    bool has_Cell_4_Voltage;
    uint32_t Cell_4_Voltage;
    bool has_Cell_5_Voltage;
    uint32_t Cell_5_Voltage;
    bool has_Cell_6_Voltage;
    uint32_t Cell_6_Voltage;
    bool has_Cell_7_Voltage;
    uint32_t Cell_7_Voltage;
    bool has_Cell_8_Voltage;
    uint32_t Cell_8_Voltage;
    bool has_Cell_9_Voltage;
    uint32_t Cell_9_Voltage;
    bool has_Cell_10_Voltage;
    uint32_t Cell_10_Voltage;
    bool has_Cell_11_Voltage;
    uint32_t Cell_11_Voltage;
    bool has_Cell_12_Voltage;
    uint32_t Cell_12_Voltage;
    bool has_Cell_13_Voltage;
    uint32_t Cell_13_Voltage;
    bool has_Cell_14_Voltage;
    uint32_t Cell_14_Voltage;
    bool has_Cell_15_Voltage;
    uint32_t Cell_15_Voltage;
} pack2master_data;

typedef struct _pack2master_flags {
    bool has_SafetyAlert_A;
    uint32_t SafetyAlert_A;
    bool has_SafetyAlert_B;
    uint32_t SafetyAlert_B;
    bool has_SafetyStatus_A;
    uint32_t SafetyStatus_A;
    bool has_SafetyStatus_B;
    uint32_t SafetyStatus_B;
    bool has_OpStatus_A;
    uint32_t OpStatus_A;
    bool has_OpStatus_B;
    uint32_t OpStatus_B;
    bool has_PFStatus_A;
    uint32_t PFStatus_A;
    bool has_PFStatus_B;
    uint32_t PFStatus_B;
    bool has_PFAlert;
    uint32_t PFAlert;
    bool has_BattMode;
    uint32_t BattMode;
    bool has_BattStatus;
    uint32_t BattStatus;
    bool has_TempStatus;
    uint32_t TempStatus;
    bool has_ChargeStatus;
    uint32_t ChargeStatus;
    bool has_GaugeStatus;
    uint32_t GaugeStatus;
    bool has_ManufacturerStatus;
    uint32_t ManufacturerStatus;
    bool has_AFEStatus;
    uint32_t AFEStatus;
    bool has_HostFET;
    uint32_t HostFET;
    bool has_GPIOStatus;
    uint32_t GPIOStatus;
    bool has_GPIOControl;
    uint32_t GPIOControl;
} pack2master_flags;

typedef struct _pack2master_pack_id {
    bool has_TI_DeviceType;
    uint32_t TI_DeviceType;
    bool has_TI_DeviceNumber;
    uint32_t TI_DeviceNumber;
    bool has_TI_FirmwareVersion;
    uint32_t TI_FirmwareVersion;
    bool has_TI_FirmwareType;
    uint32_t TI_FirmwareType;
    bool has_TI_CEDV;
    uint32_t TI_CEDV;
    bool has_TI_HW_Version;
    uint32_t TI_HW_Version;
    bool has_AVR_Device_ID;
    uint32_t AVR_Device_ID;
    bool has_AVR_FirmwareVersion;
    uint32_t AVR_FirmwareVersion;
    pb_callback_t AVR_Signature;
} pack2master_pack_id;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define pack2master_pack_id_init_default         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define pack2master_flags_init_default           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pack2master_data_init_default            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pack2master_pack_id_init_zero            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define pack2master_flags_init_zero              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pack2master_data_init_zero               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define pack2master_data_Voltage_tag             1
#define pack2master_data_VAuxVoltage_tag         2
#define pack2master_data_ExtAvgVoltage_tag       3
#define pack2master_data_Current_tag             4
#define pack2master_data_AvgCurrent_tag          5
#define pack2master_data_CycleCount_tag          6
#define pack2master_data_CapacityRemaining_tag   7
#define pack2master_data_CapacityFull_tag        8
#define pack2master_data_RuntimeToEmpty_tag      9
#define pack2master_data_AvgTimeToEmpty_tag      10
#define pack2master_data_AvgTimeToFull_tag       11
#define pack2master_data_RelativeSoC_tag         12
#define pack2master_data_AbsoluteSoC_tag         13
#define pack2master_data_SoH_tag                 14
#define pack2master_data_Cell_1_Voltage_tag      15
#define pack2master_data_Cell_2_Voltage_tag      16
#define pack2master_data_Cell_3_Voltage_tag      17
#define pack2master_data_Cell_4_Voltage_tag      18
#define pack2master_data_Cell_5_Voltage_tag      19
#define pack2master_data_Cell_6_Voltage_tag      20
#define pack2master_data_Cell_7_Voltage_tag      21
#define pack2master_data_Cell_8_Voltage_tag      22
#define pack2master_data_Cell_9_Voltage_tag      23
#define pack2master_data_Cell_10_Voltage_tag     24
#define pack2master_data_Cell_11_Voltage_tag     25
#define pack2master_data_Cell_12_Voltage_tag     26
#define pack2master_data_Cell_13_Voltage_tag     27
#define pack2master_data_Cell_14_Voltage_tag     28
#define pack2master_data_Cell_15_Voltage_tag     29
#define pack2master_flags_SafetyAlert_A_tag      1
#define pack2master_flags_SafetyAlert_B_tag      2
#define pack2master_flags_SafetyStatus_A_tag     3
#define pack2master_flags_SafetyStatus_B_tag     4
#define pack2master_flags_OpStatus_A_tag         5
#define pack2master_flags_OpStatus_B_tag         6
#define pack2master_flags_PFStatus_A_tag         7
#define pack2master_flags_PFStatus_B_tag         8
#define pack2master_flags_PFAlert_tag            9
#define pack2master_flags_BattMode_tag           10
#define pack2master_flags_BattStatus_tag         11
#define pack2master_flags_TempStatus_tag         12
#define pack2master_flags_ChargeStatus_tag       13
#define pack2master_flags_GaugeStatus_tag        14
#define pack2master_flags_ManufacturerStatus_tag 15
#define pack2master_flags_AFEStatus_tag          16
#define pack2master_flags_HostFET_tag            17
#define pack2master_flags_GPIOStatus_tag         18
#define pack2master_flags_GPIOControl_tag        19
#define pack2master_pack_id_TI_DeviceType_tag    1
#define pack2master_pack_id_TI_DeviceNumber_tag  2
#define pack2master_pack_id_TI_FirmwareVersion_tag 3
#define pack2master_pack_id_TI_FirmwareType_tag  4
#define pack2master_pack_id_TI_CEDV_tag          5
#define pack2master_pack_id_TI_HW_Version_tag    6
#define pack2master_pack_id_AVR_Device_ID_tag    7
#define pack2master_pack_id_AVR_FirmwareVersion_tag 8
#define pack2master_pack_id_AVR_Signature_tag    9

/* Struct field encoding specification for nanopb */
#define pack2master_pack_id_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_DeviceType,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_DeviceNumber,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_FirmwareVersion,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_FirmwareType,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_CEDV,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   TI_HW_Version,     6) \
X(a, STATIC,   OPTIONAL, UINT32,   AVR_Device_ID,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   AVR_FirmwareVersion,   8) \
X(a, CALLBACK, OPTIONAL, BYTES,    AVR_Signature,     9)
#define pack2master_pack_id_CALLBACK pb_default_field_callback
#define pack2master_pack_id_DEFAULT NULL

#define pack2master_flags_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   SafetyAlert_A,     1) \
X(a, STATIC,   OPTIONAL, UINT32,   SafetyAlert_B,     2) \
X(a, STATIC,   OPTIONAL, UINT32,   SafetyStatus_A,    3) \
X(a, STATIC,   OPTIONAL, UINT32,   SafetyStatus_B,    4) \
X(a, STATIC,   OPTIONAL, UINT32,   OpStatus_A,        5) \
X(a, STATIC,   OPTIONAL, UINT32,   OpStatus_B,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   PFStatus_A,        7) \
X(a, STATIC,   OPTIONAL, UINT32,   PFStatus_B,        8) \
X(a, STATIC,   OPTIONAL, UINT32,   PFAlert,           9) \
X(a, STATIC,   OPTIONAL, UINT32,   BattMode,         10) \
X(a, STATIC,   OPTIONAL, UINT32,   BattStatus,       11) \
X(a, STATIC,   OPTIONAL, UINT32,   TempStatus,       12) \
X(a, STATIC,   OPTIONAL, UINT32,   ChargeStatus,     13) \
X(a, STATIC,   OPTIONAL, UINT32,   GaugeStatus,      14) \
X(a, STATIC,   OPTIONAL, UINT32,   ManufacturerStatus,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   AFEStatus,        16) \
X(a, STATIC,   OPTIONAL, UINT32,   HostFET,          17) \
X(a, STATIC,   OPTIONAL, UINT32,   GPIOStatus,       18) \
X(a, STATIC,   OPTIONAL, UINT32,   GPIOControl,      19)
#define pack2master_flags_CALLBACK NULL
#define pack2master_flags_DEFAULT NULL

#define pack2master_data_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   Voltage,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   VAuxVoltage,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   ExtAvgVoltage,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   Current,           4) \
X(a, STATIC,   OPTIONAL, UINT32,   AvgCurrent,        5) \
X(a, STATIC,   OPTIONAL, UINT32,   CycleCount,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   CapacityRemaining,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   CapacityFull,      8) \
X(a, STATIC,   OPTIONAL, UINT32,   RuntimeToEmpty,    9) \
X(a, STATIC,   OPTIONAL, UINT32,   AvgTimeToEmpty,   10) \
X(a, STATIC,   OPTIONAL, UINT32,   AvgTimeToFull,    11) \
X(a, STATIC,   OPTIONAL, UINT32,   RelativeSoC,      12) \
X(a, STATIC,   OPTIONAL, UINT32,   AbsoluteSoC,      13) \
X(a, STATIC,   OPTIONAL, UINT32,   SoH,              14) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_1_Voltage,   15) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_2_Voltage,   16) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_3_Voltage,   17) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_4_Voltage,   18) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_5_Voltage,   19) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_6_Voltage,   20) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_7_Voltage,   21) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_8_Voltage,   22) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_9_Voltage,   23) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_10_Voltage,  24) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_11_Voltage,  25) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_12_Voltage,  26) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_13_Voltage,  27) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_14_Voltage,  28) \
X(a, STATIC,   OPTIONAL, UINT32,   Cell_15_Voltage,  29)
#define pack2master_data_CALLBACK NULL
#define pack2master_data_DEFAULT NULL

extern const pb_msgdesc_t pack2master_pack_id_msg;
extern const pb_msgdesc_t pack2master_flags_msg;
extern const pb_msgdesc_t pack2master_data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define pack2master_pack_id_fields &pack2master_pack_id_msg
#define pack2master_flags_fields &pack2master_flags_msg
#define pack2master_data_fields &pack2master_data_msg

/* Maximum encoded size of messages (where known) */
/* pack2master_pack_id_size depends on runtime parameters */
#define pack2master_flags_size                   118
#define pack2master_data_size                    188

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
